
CONVERSION_FACTORS = {
    'km/L': {                                       # km/L
        'L/km': 1,                                  # L/km
        'L/10km': 10,                               # L/10km
        'L/100km': 100,                             # L/100km
        'mpg-US': 2.35214583333333333333333333333,  # miles per gallon (US)
        'GPM-US': 42.5143707430272003401149659442,  # gallons per 100 miles (US)
        'mpg': 2.82480936331822158593812137119,     # miles per gallon (Imperial)
        'GPM': 35.4006189934647136330341018326      # gallons per 100 miles (Imperial)
    },
    'L/km': {
        'km/L': 1,
        'L/10km': 10,
        'L/100km': 100,
        'mpg-US': 2.35214583333333333333333333333,
        'GPM-US': 42.5143707430272003401149659442,
        'mpg': 2.82480936331822158593812137119,
        'GPM': 35.4006189934647136330341018326
    },
    'L/10km': {
        'km/L': 10,
        'L/km': 0.1,
        'L/100km': 10,
        'mpg-US': 23.5214583333333333333333333333,
        'GPM-US': 4.25143707430272003401149659442,
        'mpg': 28.2480936331822158593812137119,
        'GPM': 3.54006189934647136330341018326
    },
    'L/100km': {
        'km/L': 100,
        'L/km': 0.01,
        'L/10km': 0.1,
        'mpg-US': 235.214583333333333333333333333,
        'GPM-US': 0.425143707430272003401149659442,
        'mpg': 282.480936331822158593812137119,
        'GPM': 0.354006189934647136330341018326
    },
    'mpg-US': {
        'km/L': 0.425143707430272003401149659442,
        'L/km': 2.35214583333333333333333333333,
        'L/10km': 23.5214583333333333333333333333,
        'L/100km': 235.214583333333333333333333333,
        'GPM-US': 100,
        'mpg': 1.20094992550485492967440923463,
        'GPM': 83.2674184628988867356343583167
    },
    'GPM-US': {
        'km/L': 42.5143707430272003401149659442,
        'L/km': 0.0235214583333333333333333333333,
        'L/10km': 0.235214583333333333333333333333,
        'L/100km': 2.35214583333333333333333333333,
        'mpg-US': 100,
        'mpg': 120.094992550485492967440923463,
        'GPM': 0.832674184628988867356343583167
    },
    'mpg': {
        'km/L': 0.354006189934647136330341018326,
        'L/km': 2.82480936331822158593812137119,
        'L/10km': 28.2480936331822158593812137119,
        'L/100km': 282.480936331822158593812137119,
        'mpg-US': 0.832674184628988867356343583167,
        'GPM-US': 120.094992550485492967440923463,
        'GPM': 100
    },
    'GPM': {
        'km/L': 35.4006189934647136330341018326,
        'L/km': 0.0282480936331822158593812137119,
        'L/10km': 0.282480936331822158593812137119,
        'L/100km': 2.82480936331822158593812137119,
        'mpg-US': 83.2674184628988867356343583167,
        'GPM-US': 1.20094992550485492967440923463,
        'mpg': 100
    }
}


# Define the conversion function
def convert_fuel_cons(value, from_unit, to_unit):
    if from_unit == to_unit:
        return value
    else:
        factor = CONVERSION_FACTORS[from_unit][to_unit]
        return value * factor


# Test the function
print("\nChoose from:")
for i in CONVERSION_FACTORS.keys():
    print(i, end=", ")

from_unit = input("\n\n> ")
to_unit = input("> ")

value = float(input("\n> "))

result = convert_fuel_cons(value, from_unit, to_unit)
print(f'{value} {from_unit} = {result} {to_unit}')